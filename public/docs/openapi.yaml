openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/v1/authenticate:
    post:
      summary: 'Authenticate the user.'
      operationId: authenticateTheUser
      description: "Authenticates the user and sends an OTP (One-Time Password) to the user.\nThe OTP is sent using the SMS service.\nUsed for login and registration."
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 66
                    lastName: Murazik
                    firstName: Shawn
                    email: anais.jakubowski@example.org
                    emailVerifiedAt: '2025-02-24T15:18:58.000000Z'
                    phone: '+18035512506'
                    role: auteur
                    image: ''
                    thumbnail: ''
                    createdAt:
                      datetime: '2025-02-24T15:18:58.000000Z'
                      humanDiff: '0 seconds ago'
                      human: 'Mon, Feb 24, 2025 3:18 PM'
                  message: 'An OTP code has been successfully sent'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 66
                      lastName:
                        type: string
                        example: Murazik
                      firstName:
                        type: string
                        example: Shawn
                      email:
                        type: string
                        example: anais.jakubowski@example.org
                      emailVerifiedAt:
                        type: string
                        example: '2025-02-24T15:18:58.000000Z'
                      phone:
                        type: string
                        example: '+18035512506'
                      role:
                        type: string
                        example: auteur
                      image:
                        type: string
                        example: ''
                      thumbnail:
                        type: string
                        example: ''
                      createdAt:
                        type: object
                        properties:
                          datetime:
                            type: string
                            example: '2025-02-24T15:18:58.000000Z'
                          humanDiff:
                            type: string
                            example: '0 seconds ago'
                          human:
                            type: string
                            example: 'Mon, Feb 24, 2025 3:18 PM'
                  message:
                    type: string
                    example: 'An OTP code has been successfully sent'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Oops! An error occurred. Please try again.'
                properties:
                  message:
                    type: string
                    example: 'Oops! An error occurred. Please try again.'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The email address of the user. Must be a valid email address. Must not be greater than 255 characters.'
                  example: user@example.com
                  nullable: false
              required:
                - email
      security: []
  /api/v1/login:
    post:
      summary: Login
      operationId: login
      description: 'Log in a user.'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 67
                    lastName: Weissnat
                    firstName: Pedro
                    email: lubowitz.amani@example.org
                    emailVerifiedAt: '2025-02-24T15:18:58.000000Z'
                    phone: +1.678.975.8397
                    role: admin
                    image: ''
                    thumbnail: ''
                    createdAt:
                      datetime: '2025-02-24T15:18:58.000000Z'
                      humanDiff: '0 seconds ago'
                      human: 'Mon, Feb 24, 2025 3:18 PM'
                  token: 48|78454
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 67
                      lastName:
                        type: string
                        example: Weissnat
                      firstName:
                        type: string
                        example: Pedro
                      email:
                        type: string
                        example: lubowitz.amani@example.org
                      emailVerifiedAt:
                        type: string
                        example: '2025-02-24T15:18:58.000000Z'
                      phone:
                        type: string
                        example: +1.678.975.8397
                      role:
                        type: string
                        example: admin
                      image:
                        type: string
                        example: ''
                      thumbnail:
                        type: string
                        example: ''
                      createdAt:
                        type: object
                        properties:
                          datetime:
                            type: string
                            example: '2025-02-24T15:18:58.000000Z'
                          humanDiff:
                            type: string
                            example: '0 seconds ago'
                          human:
                            type: string
                            example: 'Mon, Feb 24, 2025 3:18 PM'
                  token:
                    type: string
                    example: 48|78454
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: izabella.mraz@example.net
                  nullable: false
                password:
                  type: string
                  description: ''
                  example: iure
                  nullable: false
              required:
                - email
                - password
      security: []
  /api/v1/otp-login:
    post:
      summary: 'OTP Login'
      operationId: oTPLogin
      description: "Log in a user by sending an OTP code to their phone number.\nThis method is used to authenticate a registered user by sending an OTP (One-Time Password)\nto their phone number. The OTP code is sent using the SMS service."
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 68
                    lastName: Skiles
                    firstName: Andrew
                    email: jacobi.citlalli@example.org
                    emailVerifiedAt: '2025-02-24T15:18:58.000000Z'
                    phone: 978-894-8597
                    role: auteur
                    image: ''
                    thumbnail: ''
                    createdAt:
                      datetime: '2025-02-24T15:18:58.000000Z'
                      humanDiff: '0 seconds ago'
                      human: 'Mon, Feb 24, 2025 3:18 PM'
                  token: 48|78454
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 68
                      lastName:
                        type: string
                        example: Skiles
                      firstName:
                        type: string
                        example: Andrew
                      email:
                        type: string
                        example: jacobi.citlalli@example.org
                      emailVerifiedAt:
                        type: string
                        example: '2025-02-24T15:18:58.000000Z'
                      phone:
                        type: string
                        example: 978-894-8597
                      role:
                        type: string
                        example: auteur
                      image:
                        type: string
                        example: ''
                      thumbnail:
                        type: string
                        example: ''
                      createdAt:
                        type: object
                        properties:
                          datetime:
                            type: string
                            example: '2025-02-24T15:18:58.000000Z'
                          humanDiff:
                            type: string
                            example: '0 seconds ago'
                          human:
                            type: string
                            example: 'Mon, Feb 24, 2025 3:18 PM'
                  token:
                    type: string
                    example: 48|78454
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Your OTP is not correct.'
                  action: 'Redirect to the login page.'
                properties:
                  message:
                    type: string
                    example: 'Your OTP is not correct.'
                  action:
                    type: string
                    example: 'Redirect to the login page.'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: 'The ID of the user. The <code>id</code> of an existing record in the users table.'
                  example: '1'
                  nullable: false
                otp:
                  type: number
                  description: 'The OTP code.'
                  example: 123456.0
                  nullable: false
              required:
                - user_id
                - otp
      security: []
  '/api/v1/resend-otp/{user_id}':
    post:
      summary: 'Resend OTP code'
      operationId: resendOTPCode
      description: 'Resends the OTP (One-Time Password).'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'An OTP code has been successfully sent.'
                properties:
                  message:
                    type: string
                    example: 'An OTP code has been successfully sent.'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Oops! An error occurred. Please try again.'
                properties:
                  message:
                    type: string
                    example: 'Oops! An error occurred. Please try again.'
      tags:
        - Authentication
      security: []
    parameters:
      -
        in: path
        name: user_id
        description: 'The ID of the user.'
        example: 1
        required: true
        schema:
          type: integer
  /api/v1/logout:
    post:
      summary: logout
      operationId: logout
      description: 'Log out a user.'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 69
                    lastName: Breitenberg
                    firstName: Dee
                    email: ghintz@example.com
                    emailVerifiedAt: '2025-02-24T15:18:58.000000Z'
                    phone: '(480) 540-3701'
                    role: lecteur
                    image: ''
                    thumbnail: ''
                    createdAt:
                      datetime: '2025-02-24T15:18:58.000000Z'
                      humanDiff: '0 seconds ago'
                      human: 'Mon, Feb 24, 2025 3:18 PM'
                  token: 48|78454
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 69
                      lastName:
                        type: string
                        example: Breitenberg
                      firstName:
                        type: string
                        example: Dee
                      email:
                        type: string
                        example: ghintz@example.com
                      emailVerifiedAt:
                        type: string
                        example: '2025-02-24T15:18:58.000000Z'
                      phone:
                        type: string
                        example: '(480) 540-3701'
                      role:
                        type: string
                        example: lecteur
                      image:
                        type: string
                        example: ''
                      thumbnail:
                        type: string
                        example: ''
                      createdAt:
                        type: object
                        properties:
                          datetime:
                            type: string
                            example: '2025-02-24T15:18:58.000000Z'
                          humanDiff:
                            type: string
                            example: '0 seconds ago'
                          human:
                            type: string
                            example: 'Mon, Feb 24, 2025 3:18 PM'
                  token:
                    type: string
                    example: 48|78454
      tags:
        - Authentication
      security: []
  /api/v1/categories:
    get:
      summary: 'Get the list of categories'
      operationId: getTheListOfCategories
      description: ''
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 43
                  name: sunt
                  slug: eius-eos-est-modi-blanditiis
                  createdAt:
                    datetime: '2025-02-24T15:18:58.000000Z'
                    humanDiff: '0 seconds ago'
                    human: 'Mon, Feb 24, 2025 3:18 PM'
                  image: ''
                  thumbnail: ''
                  updatedAt: '2025-02-24T15:18:58.000000Z'
                properties:
                  id:
                    type: integer
                    example: 43
                  name:
                    type: string
                    example: sunt
                  slug:
                    type: string
                    example: eius-eos-est-modi-blanditiis
                  createdAt:
                    type: object
                    properties:
                      datetime:
                        type: string
                        example: '2025-02-24T15:18:58.000000Z'
                      humanDiff:
                        type: string
                        example: '0 seconds ago'
                      human:
                        type: string
                        example: 'Mon, Feb 24, 2025 3:18 PM'
                  image:
                    type: string
                    example: ''
                  thumbnail:
                    type: string
                    example: ''
                  updatedAt:
                    type: string
                    example: '2025-02-24T15:18:58.000000Z'
      tags:
        - Category
      security: []
    post:
      summary: 'Store Category'
      operationId: storeCategory
      description: 'Store a newly created resource in storage.'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 45
                  name: aut
                  slug: corrupti-hic-quia-suscipit-perferendis-et-esse-veritatis
                  createdAt:
                    datetime: '2025-02-24T15:18:59.000000Z'
                    humanDiff: '0 seconds ago'
                    human: 'Mon, Feb 24, 2025 3:18 PM'
                  image: ''
                  thumbnail: ''
                  updatedAt: '2025-02-24T15:18:59.000000Z'
                properties:
                  id:
                    type: integer
                    example: 45
                  name:
                    type: string
                    example: aut
                  slug:
                    type: string
                    example: corrupti-hic-quia-suscipit-perferendis-et-esse-veritatis
                  createdAt:
                    type: object
                    properties:
                      datetime:
                        type: string
                        example: '2025-02-24T15:18:59.000000Z'
                      humanDiff:
                        type: string
                        example: '0 seconds ago'
                      human:
                        type: string
                        example: 'Mon, Feb 24, 2025 3:18 PM'
                  image:
                    type: string
                    example: ''
                  thumbnail:
                    type: string
                    example: ''
                  updatedAt:
                    type: string
                    example: '2025-02-24T15:18:59.000000Z'
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Category created successfully.'
                properties:
                  message:
                    type: string
                    example: 'Category created successfully.'
      tags:
        - Category
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the category. Must not be greater than 255 characters.'
                  example: Electronics
                  nullable: false
                slug:
                  type: string
                  description: 'The slug of the category. Must not be greater than 255 characters.'
                  example: electronics
                  nullable: false
                image:
                  type: string
                  format: binary
                  description: 'The image of the category. Must be an image. Must not be greater than 2048 kilobytes.'
                  nullable: true
              required:
                - name
                - slug
      security: []
  /api/v1/categories/paginate:
    get:
      summary: 'Get a paginate listing of the category resources.'
      operationId: getAPaginateListingOfTheCategoryResources
      description: ''
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 44
                  name: ut
                  slug: molestias-qui-et-officia-ducimus-harum
                  createdAt:
                    datetime: '2025-02-24T15:18:59.000000Z'
                    humanDiff: '0 seconds ago'
                    human: 'Mon, Feb 24, 2025 3:18 PM'
                  image: ''
                  thumbnail: ''
                  updatedAt: '2025-02-24T15:18:59.000000Z'
                properties:
                  id:
                    type: integer
                    example: 44
                  name:
                    type: string
                    example: ut
                  slug:
                    type: string
                    example: molestias-qui-et-officia-ducimus-harum
                  createdAt:
                    type: object
                    properties:
                      datetime:
                        type: string
                        example: '2025-02-24T15:18:59.000000Z'
                      humanDiff:
                        type: string
                        example: '0 seconds ago'
                      human:
                        type: string
                        example: 'Mon, Feb 24, 2025 3:18 PM'
                  image:
                    type: string
                    example: ''
                  thumbnail:
                    type: string
                    example: ''
                  updatedAt:
                    type: string
                    example: '2025-02-24T15:18:59.000000Z'
      tags:
        - Category
      security: []
  '/api/v1/categories/{id}':
    get:
      summary: 'Show Category'
      operationId: showCategory
      description: ''
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No query results for model [App\Models\Category] recusandae'
                properties:
                  message:
                    type: string
                    example: 'No query results for model [App\Models\Category] recusandae'
      tags:
        - Category
      security: []
    put:
      summary: 'Update Category'
      operationId: updateCategory
      description: 'Update the specified resource in storage.'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Category updated successfully'
                properties:
                  message:
                    type: string
                    example: 'Category updated successfully'
      tags:
        - Category
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the category. Must not be greater than 255 characters.'
                  example: Electronics
                  nullable: false
                slug:
                  type: string
                  description: 'The slug of the category. Must not be greater than 255 characters.'
                  example: electronics
                  nullable: false
                image:
                  type: string
                  format: binary
                  description: 'The image of the category. Must be an image. Must not be greater than 2048 kilobytes.'
                  nullable: true
              required:
                - name
                - slug
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the category.'
        example: recusandae
        required: true
        schema:
          type: string
  /api/v1/comments:
    get:
      summary: 'Get the list of comments'
      operationId: getTheListOfComments
      description: ''
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: null
                  content: null
                  createdAt: null
                properties:
                  id:
                    type: string
                    example: null
                  content:
                    type: string
                    example: null
                  createdAt:
                    type: string
                    example: null
      tags:
        - Comment
      security: []
    post:
      summary: 'Store Comment'
      operationId: storeComment
      description: 'Store a newly created resource in storage.'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: null
                  content: null
                  createdAt: null
                properties:
                  id:
                    type: string
                    example: null
                  content:
                    type: string
                    example: null
                  createdAt:
                    type: string
                    example: null
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Comment created successfully.'
                properties:
                  message:
                    type: string
                    example: 'Comment created successfully.'
      tags:
        - Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                post_id:
                  type: string
                  description: 'The ID of the post that the comment belongs to. The <code>id</code> of an existing record in the posts table.'
                  example: '1'
                  nullable: false
                content:
                  type: string
                  description: 'The content of the comment. Must not be greater than 255 characters.'
                  example: 'This is a comment.'
                  nullable: false
                user_id:
                  type: string
                  description: 'The ID of the user who created the comment. The <code>id</code> of an existing record in the users table.'
                  example: '1'
                  nullable: false
              required:
                - post_id
                - content
                - user_id
      security: []
  /api/v1/comments/paginate:
    get:
      summary: 'Get a paginate listing of the comment resources.'
      operationId: getAPaginateListingOfTheCommentResources
      description: ''
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: null
                  content: null
                  createdAt: null
                properties:
                  id:
                    type: string
                    example: null
                  content:
                    type: string
                    example: null
                  createdAt:
                    type: string
                    example: null
      tags:
        - Comment
      security: []
  '/api/v1/comments/{id}':
    get:
      summary: 'Show the specified resource.'
      operationId: showTheSpecifiedResource
      description: ''
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: null
                  content: null
                  createdAt: null
                properties:
                  id:
                    type: string
                    example: null
                  content:
                    type: string
                    example: null
                  createdAt:
                    type: string
                    example: null
      tags:
        - Comment
      security: []
    put:
      summary: 'Update Comment'
      operationId: updateComment
      description: 'Update the specified resource in storage.'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Comment updated successfully.'
                properties:
                  message:
                    type: string
                    example: 'Comment updated successfully.'
      tags:
        - Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                post_id:
                  type: string
                  description: 'The ID of the post that the comment belongs to. The <code>id</code> of an existing record in the posts table.'
                  example: '1'
                  nullable: false
                content:
                  type: string
                  description: 'The content of the comment. Must not be greater than 255 characters.'
                  example: 'This is a comment.'
                  nullable: false
                user_id:
                  type: string
                  description: 'The ID of the user who created the comment. The <code>id</code> of an existing record in the users table.'
                  example: '1'
                  nullable: false
              required:
                - post_id
                - content
                - user_id
      security: []
    delete:
      summary: 'Delete the specified resource from storage.'
      operationId: deleteTheSpecifiedResourceFromStorage
      description: ''
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        204:
          description: Success
      tags:
        - Comment
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the comment.'
        example: voluptatibus
        required: true
        schema:
          type: string
  /api/v1/likes:
    get:
      summary: 'Get the list of likes'
      operationId: getTheListOfLikes
      description: ''
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: null
                  liked: null
                  createdAt: null
                  updatedAt: null
                properties:
                  id:
                    type: string
                    example: null
                  liked:
                    type: string
                    example: null
                  createdAt:
                    type: string
                    example: null
                  updatedAt:
                    type: string
                    example: null
      tags:
        - Like
      security: []
    post:
      summary: 'Store a new like'
      operationId: storeANewLike
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: null
                  liked: null
                  createdAt: null
                  updatedAt: null
                properties:
                  id:
                    type: string
                    example: null
                  liked:
                    type: string
                    example: null
                  createdAt:
                    type: string
                    example: null
                  updatedAt:
                    type: string
                    example: null
      tags:
        - Like
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: 'The ID of the user who liked the post. The <code>id</code> of an existing record in the users table.'
                  example: '1'
                  nullable: false
                post_id:
                  type: string
                  description: 'The ID of the post that was liked. The <code>id</code> of an existing record in the posts table.'
                  example: '1'
                  nullable: false
                liked:
                  type: boolean
                  description: 'Whether the user liked the post or not.'
                  example: true
                  nullable: false
                comment_id:
                  type: string
                  description: 'The ID of the comment that was liked, if applicable. The <code>id</code> of an existing record in the comments table.'
                  example: '1'
                  nullable: true
              required:
                - user_id
                - post_id
                - liked
      security: []
  /api/v1/likes/paginate:
    get:
      summary: 'Get a paginate listing of the like resources.'
      operationId: getAPaginateListingOfTheLikeResources
      description: ''
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: null
                  liked: null
                  createdAt: null
                  updatedAt: null
                properties:
                  id:
                    type: string
                    example: null
                  liked:
                    type: string
                    example: null
                  createdAt:
                    type: string
                    example: null
                  updatedAt:
                    type: string
                    example: null
      tags:
        - Like
      security: []
  '/api/v1/likes/{id}':
    delete:
      summary: 'Delete a like'
      operationId: deleteALike
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: null
                  liked: null
                  createdAt: null
                  updatedAt: null
                properties:
                  id:
                    type: string
                    example: null
                  liked:
                    type: string
                    example: null
                  createdAt:
                    type: string
                    example: null
                  updatedAt:
                    type: string
                    example: null
      tags:
        - Like
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the like.'
        example: 6
        required: true
        schema:
          type: integer
  /api/v1/posts:
    get:
      summary: 'Get the list of posts'
      operationId: getTheListOfPosts
      description: ''
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: null
                  title: 'Tenetur aut natus aspernatur tenetur.'
                  content: 'Est hic porro doloremque impedit voluptatibus est nemo. Modi sed accusantium voluptas iure qui. Consequatur ipsam ipsam veritatis eligendi nobis omnis rem. In rerum sit porro ea.'
                  status: published
                  slug: architecto-eligendi-commodi-odit-natus
                  createdAt: null
                  image: ''
                  thumbnail: ''
                properties:
                  id:
                    type: string
                    example: null
                  title:
                    type: string
                    example: 'Tenetur aut natus aspernatur tenetur.'
                  content:
                    type: string
                    example: 'Est hic porro doloremque impedit voluptatibus est nemo. Modi sed accusantium voluptas iure qui. Consequatur ipsam ipsam veritatis eligendi nobis omnis rem. In rerum sit porro ea.'
                  status:
                    type: string
                    example: published
                  slug:
                    type: string
                    example: architecto-eligendi-commodi-odit-natus
                  createdAt:
                    type: string
                    example: null
                  image:
                    type: string
                    example: ''
                  thumbnail:
                    type: string
                    example: ''
      tags:
        - Post
      security: []
    post:
      summary: 'Store Post'
      operationId: storePost
      description: 'Store a newly created resource in storage.'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: null
                  title: 'Non odit nulla quia accusantium.'
                  content: 'Quia et beatae repudiandae magnam aut quaerat in perferendis. Reprehenderit eveniet explicabo vero ut ex. Distinctio repudiandae ut labore.'
                  status: published
                  slug: quas-ullam-earum-excepturi-est-hic-eum
                  createdAt: null
                  image: ''
                  thumbnail: ''
                properties:
                  id:
                    type: string
                    example: null
                  title:
                    type: string
                    example: 'Non odit nulla quia accusantium.'
                  content:
                    type: string
                    example: 'Quia et beatae repudiandae magnam aut quaerat in perferendis. Reprehenderit eveniet explicabo vero ut ex. Distinctio repudiandae ut labore.'
                  status:
                    type: string
                    example: published
                  slug:
                    type: string
                    example: quas-ullam-earum-excepturi-est-hic-eum
                  createdAt:
                    type: string
                    example: null
                  image:
                    type: string
                    example: ''
                  thumbnail:
                    type: string
                    example: ''
      tags:
        - Post
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'The title of the post. Must not be greater than 255 characters.'
                  example: 'Post Title'
                  nullable: false
                content:
                  type: string
                  description: 'The content of the post.'
                  example: 'Post Content'
                  nullable: false
                status:
                  type: string
                  description: 'The status of the post. Must not be greater than 255 characters.'
                  example: 'Post Status'
                  nullable: true
                slug:
                  type: string
                  description: 'The slug of the post. Must match the regex /^[a-z0-9-]+$/. Must not be greater than 255 characters.'
                  example: post-slug
                  nullable: true
                user_id:
                  type: integer
                  description: 'The ID of the user. The <code>id</code> of an existing record in the users table.'
                  example: 1
                  nullable: false
                category_id:
                  type: integer
                  description: 'The ID of the category. The <code>id</code> of an existing record in the categories table.'
                  example: 1
                  nullable: false
                image:
                  type: string
                  format: binary
                  description: 'The image of the post. Must be an image. Must not be greater than 2048 kilobytes.'
                  nullable: true
                tag_id:
                  type: array
                  description: 'The <code>id</code> of an existing record in the tags table.'
                  example:
                    - dolorem
                  items:
                    type: string
              required:
                - title
                - content
                - user_id
                - category_id
      security: []
  '/api/v1/posts/{id}':
    get:
      summary: 'Show Post'
      operationId: showPost
      description: 'Show the specified resource.'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No query results for model [App\Models\Post] dolore'
                properties:
                  message:
                    type: string
                    example: 'No query results for model [App\Models\Post] dolore'
      tags:
        - Post
      security: []
    put:
      summary: 'Update Post'
      operationId: updatePost
      description: 'Update the specified resource in storage.'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Post updated successfully.'
                properties:
                  message:
                    type: string
                    example: 'Post updated successfully.'
      tags:
        - Post
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'The title of the post. Must not be greater than 255 characters.'
                  example: 'Post Title'
                  nullable: false
                content:
                  type: string
                  description: 'The content of the post.'
                  example: 'Post Content'
                  nullable: false
                status:
                  type: string
                  description: 'The status of the post. Must not be greater than 255 characters.'
                  example: 'Post Status'
                  nullable: true
                slug:
                  type: string
                  description: 'The slug of the post. Must match the regex /^[a-z0-9-]+$/. Must not be greater than 255 characters.'
                  example: post-slug
                  nullable: true
                user_id:
                  type: integer
                  description: 'The ID of the user. The <code>id</code> of an existing record in the users table.'
                  example: 1
                  nullable: false
                category_id:
                  type: integer
                  description: 'The ID of the category. The <code>id</code> of an existing record in the categories table.'
                  example: 1
                  nullable: false
                image:
                  type: string
                  format: binary
                  description: 'The image of the post. Must be an image. Must not be greater than 2048 kilobytes.'
                  nullable: true
                tag_id:
                  type: array
                  description: 'The <code>id</code> of an existing record in the tags table.'
                  example:
                    - voluptatem
                  items:
                    type: string
              required:
                - title
                - content
                - user_id
                - category_id
      security: []
    delete:
      summary: 'Delete Post'
      operationId: deletePost
      description: 'Remove the specified resource from storage.'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        204:
          description: Success
      tags:
        - Post
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the post.'
        example: dolore
        required: true
        schema:
          type: string
  /api/v1/tags:
    get:
      summary: 'Get the list of tags.'
      operationId: getTheListOfTags
      description: ''
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 9
                  name: ratione
                  slug: deserunt-porro-ut-doloribus
                  createdAt:
                    datetime: '2025-02-24T15:19:00.000000Z'
                    humanDiff: '0 seconds ago'
                    human: 'Mon, Feb 24, 2025 3:19 PM'
                properties:
                  id:
                    type: integer
                    example: 9
                  name:
                    type: string
                    example: ratione
                  slug:
                    type: string
                    example: deserunt-porro-ut-doloribus
                  createdAt:
                    type: object
                    properties:
                      datetime:
                        type: string
                        example: '2025-02-24T15:19:00.000000Z'
                      humanDiff:
                        type: string
                        example: '0 seconds ago'
                      human:
                        type: string
                        example: 'Mon, Feb 24, 2025 3:19 PM'
      tags:
        - Tag
      security: []
    post:
      summary: 'Store tag'
      operationId: storeTag
      description: 'Store a newly created resource in storage.'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 11
                  name: labore
                  slug: perspiciatis-consequuntur-hic-assumenda-consectetur-nihil
                  createdAt:
                    datetime: '2025-02-24T15:19:00.000000Z'
                    humanDiff: '0 seconds ago'
                    human: 'Mon, Feb 24, 2025 3:19 PM'
                properties:
                  id:
                    type: integer
                    example: 11
                  name:
                    type: string
                    example: labore
                  slug:
                    type: string
                    example: perspiciatis-consequuntur-hic-assumenda-consectetur-nihil
                  createdAt:
                    type: object
                    properties:
                      datetime:
                        type: string
                        example: '2025-02-24T15:19:00.000000Z'
                      humanDiff:
                        type: string
                        example: '0 seconds ago'
                      human:
                        type: string
                        example: 'Mon, Feb 24, 2025 3:19 PM'
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Tag created successfully.'
                properties:
                  message:
                    type: string
                    example: 'Tag created successfully.'
      tags:
        - Tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the tag. Must not be greater than 255 characters.'
                  example: 'Tag Name'
                  nullable: false
                slug:
                  type: string
                  description: 'The slug of the tag. Must not be greater than 255 characters.'
                  example: tag-slug
                  nullable: false
              required:
                - name
                - slug
      security: []
  /api/v1/tags/paginate:
    get:
      summary: 'Get a paginate listing of the tag resources.'
      operationId: getAPaginateListingOfTheTagResources
      description: ''
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 10
                  name: sequi
                  slug: voluptatem-amet-enim-aperiam-aspernatur-saepe-dolor-saepe
                  createdAt:
                    datetime: '2025-02-24T15:19:00.000000Z'
                    humanDiff: '0 seconds ago'
                    human: 'Mon, Feb 24, 2025 3:19 PM'
                properties:
                  id:
                    type: integer
                    example: 10
                  name:
                    type: string
                    example: sequi
                  slug:
                    type: string
                    example: voluptatem-amet-enim-aperiam-aspernatur-saepe-dolor-saepe
                  createdAt:
                    type: object
                    properties:
                      datetime:
                        type: string
                        example: '2025-02-24T15:19:00.000000Z'
                      humanDiff:
                        type: string
                        example: '0 seconds ago'
                      human:
                        type: string
                        example: 'Mon, Feb 24, 2025 3:19 PM'
      tags:
        - Tag
      security: []
  '/api/v1/tags/{id}':
    get:
      summary: 'Show the specified resource.'
      operationId: showTheSpecifiedResource
      description: ''
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 12
                  name: rerum
                  slug: reiciendis-fuga-culpa-accusamus-voluptas-rerum
                  createdAt:
                    datetime: '2025-02-24T15:19:00.000000Z'
                    humanDiff: '0 seconds ago'
                    human: 'Mon, Feb 24, 2025 3:19 PM'
                properties:
                  id:
                    type: integer
                    example: 12
                  name:
                    type: string
                    example: rerum
                  slug:
                    type: string
                    example: reiciendis-fuga-culpa-accusamus-voluptas-rerum
                  createdAt:
                    type: object
                    properties:
                      datetime:
                        type: string
                        example: '2025-02-24T15:19:00.000000Z'
                      humanDiff:
                        type: string
                        example: '0 seconds ago'
                      human:
                        type: string
                        example: 'Mon, Feb 24, 2025 3:19 PM'
      tags:
        - Tag
      security: []
    put:
      summary: 'Update tag'
      operationId: updateTag
      description: 'Update the specified resource in storage.'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Tag updated successfully.'
                properties:
                  message:
                    type: string
                    example: 'Tag updated successfully.'
      tags:
        - Tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the tag. Must not be greater than 255 characters.'
                  example: 'Tag Name'
                  nullable: false
                slug:
                  type: string
                  description: 'The slug of the tag. Must not be greater than 255 characters.'
                  example: tag-slug
                  nullable: false
              required:
                - name
                - slug
      security: []
    delete:
      summary: 'Remove the specified resource from storage.'
      operationId: removeTheSpecifiedResourceFromStorage
      description: ''
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Tag deleted successfully.'
                properties:
                  message:
                    type: string
                    example: 'Tag deleted successfully.'
      tags:
        - Tag
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the tag.'
        example: sit
        required: true
        schema:
          type: string
  /api/v1/users:
    get:
      summary: 'Get the list of users'
      operationId: getTheListOfUsers
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 98
                  lastName: McDermott
                  firstName: Malika
                  email: ocartwright@example.net
                  emailVerifiedAt: '2025-02-24T15:19:01.000000Z'
                  phone: 1-332-353-7525
                  role: auteur
                  image: ''
                  thumbnail: ''
                  createdAt:
                    datetime: '2025-02-24T15:19:01.000000Z'
                    humanDiff: '0 seconds ago'
                    human: 'Mon, Feb 24, 2025 3:19 PM'
                properties:
                  id:
                    type: integer
                    example: 98
                  lastName:
                    type: string
                    example: McDermott
                  firstName:
                    type: string
                    example: Malika
                  email:
                    type: string
                    example: ocartwright@example.net
                  emailVerifiedAt:
                    type: string
                    example: '2025-02-24T15:19:01.000000Z'
                  phone:
                    type: string
                    example: 1-332-353-7525
                  role:
                    type: string
                    example: auteur
                  image:
                    type: string
                    example: ''
                  thumbnail:
                    type: string
                    example: ''
                  createdAt:
                    type: object
                    properties:
                      datetime:
                        type: string
                        example: '2025-02-24T15:19:01.000000Z'
                      humanDiff:
                        type: string
                        example: '0 seconds ago'
                      human:
                        type: string
                        example: 'Mon, Feb 24, 2025 3:19 PM'
      tags:
        - User
    post:
      summary: 'Store User'
      operationId: storeUser
      description: 'Strore a newly created resource in storage.'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User created successfully.'
                properties:
                  message:
                    type: string
                    example: 'User created successfully.'
      tags:
        - User
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: 'The first name of the user. Must not be greater than 255 characters.'
                  example: John
                  nullable: false
                last_name:
                  type: string
                  description: 'The last name of the user. Must not be greater than 255 characters.'
                  example: Doe
                  nullable: false
                email:
                  type: string
                  description: 'The email of the user. Must be a valid email address. Must not be greater than 255 characters.'
                  example: n9vI3@example.com
                  nullable: false
                password:
                  type: string
                  description: 'The password of the user. Must be at least 8 characters.'
                  example: password
                  nullable: false
                role:
                  type: string
                  description: 'The role of the user. Must not be greater than 255 characters.'
                  example: admin
                  nullable: false
                phone:
                  type: string
                  description: 'The phone number of the user. Must match the regex /^([0-9\s\-\+\(\)]*)$/. Must be at least 8 characters. Must not be greater than 12 characters.'
                  example: '123456789'
                  nullable: false
                image:
                  type: string
                  format: binary
                  description: 'The image of the user. Must be an image. Must not be greater than 2048 kilobytes.'
                  nullable: true
                address:
                  type: object
                  description: ''
                  example: null
                  nullable: true
                  properties:
                    place_id:
                      type: string
                      description: ''
                      example: dolorem
                      nullable: true
                    place_name:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: whcxxtcyv
                      nullable: true
                    longitude:
                      type: number
                      description: ''
                      example: 499.5
                      nullable: true
                    latitude:
                      type: number
                      description: ''
                      example: 259.94172
                      nullable: true
                    street_name:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: cdtcsybdmcjwpvbvemtwku
                      nullable: true
              required:
                - first_name
                - last_name
                - email
                - password
                - role
                - phone
  /api/v1/users/paginate:
    get:
      summary: 'Get a paginate listing of the user resources.'
      operationId: getAPaginateListingOfTheUserResources
      description: ''
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 99
                  lastName: Christiansen
                  firstName: Manuela
                  email: schowalter.ted@example.net
                  emailVerifiedAt: '2025-02-24T15:19:01.000000Z'
                  phone: 559-480-0534
                  role: admin
                  image: ''
                  thumbnail: ''
                  createdAt:
                    datetime: '2025-02-24T15:19:01.000000Z'
                    humanDiff: '0 seconds ago'
                    human: 'Mon, Feb 24, 2025 3:19 PM'
                properties:
                  id:
                    type: integer
                    example: 99
                  lastName:
                    type: string
                    example: Christiansen
                  firstName:
                    type: string
                    example: Manuela
                  email:
                    type: string
                    example: schowalter.ted@example.net
                  emailVerifiedAt:
                    type: string
                    example: '2025-02-24T15:19:01.000000Z'
                  phone:
                    type: string
                    example: 559-480-0534
                  role:
                    type: string
                    example: admin
                  image:
                    type: string
                    example: ''
                  thumbnail:
                    type: string
                    example: ''
                  createdAt:
                    type: object
                    properties:
                      datetime:
                        type: string
                        example: '2025-02-24T15:19:01.000000Z'
                      humanDiff:
                        type: string
                        example: '0 seconds ago'
                      human:
                        type: string
                        example: 'Mon, Feb 24, 2025 3:19 PM'
      tags:
        - User
  '/api/v1/users/{id}':
    get:
      summary: 'Show User'
      operationId: showUser
      description: 'Show the specified resource.'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No query results for model [App\Models\User] error'
                properties:
                  message:
                    type: string
                    example: 'No query results for model [App\Models\User] error'
      tags:
        - User
    put:
      summary: 'Update User'
      operationId: updateUser
      description: 'Update the specified resource in storage.'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        200:
          description: Updated
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"message\":\"User updated successfully\"\n \"data\": {\n    // user and address details here\n  }\n\n}"
      tags:
        - User
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: 'The first name of the user. Must not be greater than 255 characters.'
                  example: John
                  nullable: false
                last_name:
                  type: string
                  description: 'The last name of the user. Must not be greater than 255 characters.'
                  example: Doe
                  nullable: false
                email:
                  type: string
                  description: 'The email of the user. Must be a valid email address. Must not be greater than 255 characters.'
                  example: n9vI3@example.com
                  nullable: false
                password:
                  type: string
                  description: 'The password of the user. Must be at least 8 characters.'
                  example: password
                  nullable: false
                role:
                  type: string
                  description: 'The role of the user. Must not be greater than 255 characters.'
                  example: admin
                  nullable: false
                phone:
                  type: string
                  description: 'The phone number of the user. Must match the regex /^([0-9\s\-\+\(\)]*)$/. Must be at least 8 characters. Must not be greater than 12 characters.'
                  example: '123456789'
                  nullable: false
                image:
                  type: string
                  format: binary
                  description: 'The image of the user. Must be an image. Must not be greater than 2048 kilobytes.'
                  nullable: true
                address:
                  type: object
                  description: ''
                  example: null
                  nullable: true
                  properties:
                    place_id:
                      type: string
                      description: ''
                      example: id
                      nullable: true
                    place_name:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: qlrjdcxoqcds
                      nullable: true
                    longitude:
                      type: number
                      description: ''
                      example: 1190215.35
                      nullable: true
                    latitude:
                      type: number
                      description: ''
                      example: 33070199.9
                      nullable: true
                    street_name:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: obfynlchefdiunwwi
                      nullable: true
              required:
                - first_name
                - last_name
                - email
                - password
                - role
                - phone
    delete:
      summary: 'Delete User'
      operationId: deleteUser
      description: 'Remove the specified resource from storage.'
      parameters:
        -
          in: header
          name: Accept-Language
          description: ''
          example: en
          schema:
            type: string
      responses:
        204:
          description: Success
      tags:
        - User
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: error
        required: true
        schema:
          type: string
tags:
  -
    name: Authentication
    description: "\nAPIs for authentication"
  -
    name: Category
    description: "\nAPIs for category management"
  -
    name: Comment
    description: "\nAPIs for comment management"
  -
    name: Like
    description: "\nAPIs for like management"
  -
    name: Post
    description: "\nAPIs for post management"
  -
    name: Tag
    description: "\n APIs for tag management"
  -
    name: User
    description: "\nAPIs for user"
